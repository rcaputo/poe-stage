$Id$

Fix bugs:

	xantus:

		Failed test (t/01_all_call_types.t at line 137)
		Failed test (t/01_all_call_types.t at line 169)

		I can't reproduce this on FreeBSD or OS X.  I don't know what OS,
		Perl or POE xantus used to cause this.

Other stuff:

The recent massive commit includes duplicated and sometimes crude and
ugly code because it was hard to align all the fiddly little bits so
they would work.

Now that they do:

DONE: Abstract common bits from the various watchers into a base
class.

	So far there have been insufficient common bits to abstract.  The
	closest thing to a common bit of code has been deliver() and even
	then it differs enough not to bother.

DONE: Abstract common bits from the requests into base classes.

	The upward-facing requests (Return, Emit) are almost identical.
	Abstracted their common bits into POE::Request::Upward, which is a
	subclass of POE::Request.

	Request and Recall are suffuciently different as to make an abstract
	common class unnecessary at this time.  I did remove Recall's
	deliver() because it was identical to Request's.  I also moved
	_recall up to Emit's recall() because Emit is the only request that
	can be recalled.

DONE: Define sub-request scoping rules.

	Storing directly to a request object tucks the data away within a
	special place in the Stage.  This enables

		$self->{req}{key} = $value;

	and

		$self->{req}{foo} = POE::Request->new();
		$self->{req}{foo}{key} = $value;

	as well as $self->{rsp} stuff.

DONE: Document what exists so far.

4. Create a POE::Stage::Resolver that is analogous to
POE::Component::Client::DNS

	DONE: It answers simple A to PTR requests.

	b. Answer name to A requests.

	c. Needs a timeout.

...

POE::Stage::Resolver    - POE::Component::Client::DNS
POE::Stage::Connector   - POE::Wheel::SocketFactory (client mode)
POE::Stage::Acceptor    - POE::Wheel::SocketFactory (server mode)
POE::Stage::IO          - POE::Wheel::ReadWrite
POE::Connection         - represents an established point-to-point
POE::Connection::Socket - a connection with additional socket methods

To replace POE::Component::Client::Keepalive, I would like to create a
mix-in class that defines a resource's poolability and generic pool
management stage:

	POE::Aspect::Poolable   - Allows a class to be pooled.
	POE::Stage::Pool        - Manage poolable objects.

And higher-level TCP client/server classes:

	POE::Stage::TcpClient   - POE::Component::Client::TCP
	POE::Stage::TcpServer   - POE::Component::Server::TCP

Then:

POE::Stage::HttpClient    - POE::Component::Client::{HTTP,UserAgent}

...

N. Create a POE::Stage::HttpClient that is analogous to
POE::Component::Client::HTTP

	a. Add any new watchers we'll need.
